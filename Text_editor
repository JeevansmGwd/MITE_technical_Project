#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void viewFile(char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Cannot open file %s\n", filename);
        return;
    }

    char c;
    while ((c = fgetc(file)) != EOF) {
        putchar(c);
    }

    fclose(file);
}

void writeFile(char *filename, char *content) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Cannot open file %s\n", filename);
        return;
    }
fputs(content, file);

    fclose(file);
}

void insertText(char *filename, int position, char *text) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Cannot open file %s\n", filename);
        return;
    }

    fseek(file, 0, SEEK_END);
    long fileSize = ftell(file);
    fseek(file, position, SEEK_SET);

    char *buffer = (char *)malloc(fileSize + strlen(text) + 1);
    fread(buffer, fileSize, 1, file);
    buffer[fileSize] = '\0';

    fseek(file, position, SEEK_SET);
    fwrite(text, strlen(text), 1, file);
    fwrite(buffer, fileSize, 1, file);

    free(buffer);
    fclose(file);
}

void deleteText(char *filename, int position, int length) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Cannot open file %s\n", filename);
        return;
    }
fseek(file, 0, SEEK_END);
    long fileSize = ftell(file);
    fseek(file, position + length, SEEK_SET);

    char *buffer = (char *)malloc(fileSize - length + 1);
    fread(buffer, fileSize - position - length, 1, file);
    buffer[fileSize - position - length] = '\0';

    fseek(file, position, SEEK_SET);
    fwrite(buffer, fileSize - position - length, 1, file);

    free(buffer);
    fclose(file);
}

void findAndReplace(char *filename, char *find, char *replace) {
    FILE *file = fopen(filename, "r+");
    if (file == NULL) {
        printf("Cannot open file %s\n", filename);
        return;
    }

    char *buffer = NULL;
    size_t bufferSize = 0;
    ssize_t bytesRead;
    int position = 0;
    int occurrences = 0;

while ((bytesRead = getline(&buffer, &bufferSize, file)) != -1) {
        char *positionPtr = strstr(buffer, find);
        while (positionPtr != NULL) {
            occurrences++;
            position = positionPtr - buffer;
            fseek(file, -bytesRead + position, SEEK_CUR);
            fwrite(replace, strlen(replace), 1, file);
            fseek(file, bytesRead - position - strlen(find), SEEK_CUR);
            positionPtr = strstr(positionPtr + strlen(replace), find);
        }
    }

    free(buffer);
    fclose(file);

    printf("Occurrences replaced: %d\n", occurrences);
}

int main() {
    char filename[256];
    printf("Enter filename: ");
    fgets(filename, sizeof(filename), stdin);
    filename[strcspn(filename, "\n")] = 0;

    while (1) {
        printf("\n1. View file\n");
        printf("2. Edit file (insert)\n");
        printf("3. Edit file (delete)\n");
        printf("4. Find and replace\n");
        printf("5. Save and exit\n");
        printf("Enter option: ");
int option;
        scanf("%d", &option);
        getchar(); // Consume newline character left in the input buffer

        switch (option) {
            case 1:
                viewFile(filename);
                break;
            case 2: {
                int position;
                char text[256];

                printf("Enter position to insert: ");
                scanf("%d", &position);
                getchar(); // Consume newline character left in the input buffer

                printf("Enter text to insert: ");
                fgets(text, sizeof(text), stdin);
                text[strcspn(text, "\n")] = 0;

                insertText(filename, position, text);
                break;
            }
            case 3: {
                int position, length;

                printf("Enter position to delete: ");
                scanf("%d", &position);
                getchar(); // Consume newline character left in the input buffer

                printf("Enter length to delete: ");
                scanf("%d", &length);
                getchar(); // Consume newline character left in the input buffer

                deleteText(filename, position, length);
                break;
            }
            case 4: {
                char find[256], replace[256];

                printf("Enter text to find: ");
                fgets(find, sizeof(find), stdin);
                find[strcspn(find, "\n")] = 0;

                printf("Enter replacement text: ");
                fgets(replace, sizeof(replace), stdin);
                replace[strcspn(replace, "\n")] = 0;

                findAndReplace(filename, find, replace);
                break;
            }
            case 5:
                printf("Changes saved. Exiting...\n");
                return 0;
            default:
                printf("Invalid option. Try again.\n");
                break;
        }
    }

    return 0;
}
